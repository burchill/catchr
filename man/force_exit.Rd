% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make-handlers.R
\name{force_exit}
\alias{force_exit}
\title{Force an exit}
\usage{
force_exit(expr = NULL)
}
\arguments{
\item{expr}{An optional expression, which if specified, will be run after \code{force_exit} exits the evaluation.}
}
\description{
This function forces a \code{catchr} plan to exit the evaluation of an expression (and the rest of the plan) immediately. Unlike most \code{catchr} functions and special reserved terms, \code{force_exit} is meant to be used in the user-defined functions of a plan.
}
\details{
To-do: add details
}
\examples{
# Below is a little like what happens under the hood in catchr INTERNALLY:
#   `force_exit` throws a "catchr_force_exit" condition (usually made internally),
#   which has a handler that always exits.

with_ordered_handlers(
  { warning("A"); warning("B"); warning("C"); "Success!" },
  warning = rlang::calling(function(x) {
    if (x$message == "B")
      force_exit(x)
    else
      invokeRestart(first_muffle_restart(x))}),
  "catchr_force_exit" = rlang::exiting(function(x) {
    print(paste0("Found a 'B' condition with class: ",
                 paste(x$old_class, collapse=" ")))
    "Failure!" })
)

}
